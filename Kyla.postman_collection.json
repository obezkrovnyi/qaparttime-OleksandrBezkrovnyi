{
	"info": {
		"_postman_id": "4b1dee4b-2204-4ec8-b331-2983a4f4e414",
		"name": "Kyla",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30460977"
	},
	"item": [
		{
			"name": "List of free time slots success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains 'currentDate' property\", function () {",
							"  pm.response.to.have.jsonBody('data.currentDate');",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response has the required fields - success, data, and error\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success');",
							"  pm.expect(responseData).to.have.property('data');",
							"  pm.expect(responseData).to.have.property('error');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?date={{currentdate}}&clinicId={{clinicId}}&examRoom={{examRoom}}",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "date",
							"value": "{{currentdate}}"
						},
						{
							"key": "clinicId",
							"value": "{{clinicId}}"
						},
						{
							"key": "examRoom",
							"value": "{{examRoom}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of free slots without date",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');",
							"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('type');",
							"  pm.expect(responseData).to.have.property('title');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('detail');",
							"  pm.expect(responseData).to.have.property('instance');",
							"  pm.expect(responseData).to.have.property('properties');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?clinicId={{clinicId}}&examRoom={{examRoom}}",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "date",
							"value": "{{currentdate}}",
							"disabled": true
						},
						{
							"key": "clinicId",
							"value": "{{clinicId}}"
						},
						{
							"key": "examRoom",
							"value": "{{examRoom}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of free slots without examRoom",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.to.have.status(400));",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('type');",
							"  pm.expect(responseData).to.have.property('title');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('detail');",
							"  pm.expect(responseData).to.have.property('instance');",
							"  pm.expect(responseData).to.have.property('properties');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?date={{currentdate}}&clinicId={{clinicId}}",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "date",
							"value": "{{currentdate}}"
						},
						{
							"key": "clinicId",
							"value": "{{clinicId}}"
						},
						{
							"key": "examRoom",
							"value": "{{examRoom}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of free slots with invalid clinicID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"pm.test(\"Response contains 'error' property\", function () {const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('error');",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?date={{currentdate}}&clinicId={{$randomWord}}&examRoom={{examRoom}}",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "date",
							"value": "{{currentdate}}"
						},
						{
							"key": "clinicId",
							"value": "{{$randomWord}}"
						},
						{
							"key": "examRoom",
							"value": "{{examRoom}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of free slots with invalid clinicID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.to.have.status(400));",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('type');",
							"  pm.expect(responseData).to.have.property('title');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('detail');",
							"  pm.expect(responseData).to.have.property('instance');",
							"  pm.expect(responseData).to.have.property('properties');",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?date={{$randomWord}}&clinicId={{clinicId}}&examRoom={{examRoom}}",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "date",
							"value": "{{$randomWord}}"
						},
						{
							"key": "clinicId",
							"value": "{{clinicId}}"
						},
						{
							"key": "examRoom",
							"value": "{{examRoom}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var moment = require('moment');",
					"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "https://prod.kyla.com/drchrono/public/api/v1/schedule",
			"type": "string"
		},
		{
			"key": "clinicId",
			"value": "110544",
			"type": "string"
		},
		{
			"key": "examRoom",
			"value": "1",
			"type": "string"
		}
	]
}